{"version":3,"file":"static/js/262.d9e92c0f.chunk.js","mappings":"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","sources":["webpack://react-homework-template/./src/components/PhoneBookList/PhoneBookList.module.css?b096","components/PhoneBookList/PhoneBookList.jsx","webpack://react-homework-template/./src/components/Form/Form.module.css?89ba","components/Form/Form.jsx","webpack://react-homework-template/./src/components/Filter/Filter.module.css?fad1","components/Filter/Filter.jsx","redux/items/phone-book-items-selector.js","redux/filter/phoneBookFilter-selector.js","pages/ContactsPage/ContactsPage.jsx","../node_modules/nanoid/index.browser.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"list\":\"PhoneBookList_list__n0Wz4\",\"phoneBookListItem\":\"PhoneBookList_phoneBookListItem__Rb19s\",\"nameText\":\"PhoneBookList_nameText__dAIeL\",\"phoneNumber\":\"PhoneBookList_phoneNumber__8ZII5\",\"buttonDelete\":\"PhoneBookList_buttonDelete__aJii2\"};","import s from './PhoneBookList.module.css';\nimport PropTypes from 'prop-types';\n\nconst PhoneBookList = ({ phoneList, onDeletePhoneListItem }) => {\n  // console.log(phoneList);\n  return (\n    <ul className={s.list}>\n      {phoneList.map(({ id, name, number }) => (\n        <li key={id} className={s.phoneBookListItem}>\n          <p className={s.nameText}>{name}</p>\n          <p className={s.phoneNumber}>{number}</p>\n          <button\n            className={s.buttonDelete}\n            onClick={() => onDeletePhoneListItem(id)}\n          >\n            remove\n          </button>\n        </li>\n      ))}\n    </ul>\n  );\n};\n\nexport default PhoneBookList;\n\nPhoneBookList.propTypes = {\n  phoneList: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      name: PropTypes.string.isRequired,\n      number: PropTypes.string.isRequired,\n    })\n  ),\n  onDeletePhoneListItem: PropTypes.func,\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"form\":\"Form_form__e1yzW\",\"label\":\"Form_label__8nx+5\",\"input\":\"Form_input__FTtTw\",\"addContact\":\"Form_addContact__bfrLD\"};","import React from 'react';\nimport { useState } from 'react';\nimport { nanoid } from 'nanoid';\nimport s from './Form.module.css';\nimport PropTypes from 'prop-types';\n\nfunction Form({ onSubmit }) {\n  const [name, setName] = useState('');\n  const [phone, setPhone] = useState('');\n\n  const nameInputId = nanoid();\n  const numberInputId = nanoid();\n\n  const hendleInputChange = event => {\n    const { name, value } = event.currentTarget;\n\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n      case 'phone':\n        setPhone(value);\n        break;\n      default:\n        return;\n    }\n  };\n\n  const hendleSubmit = event => {\n    event.preventDefault();\n    const data = {\n      name,\n      number: phone,\n    };\n\n    onSubmit(data);\n\n    resetForm();\n  };\n\n  const resetForm = () => {\n    setName('');\n    setPhone('');\n  };\n\n  return (\n    <form onSubmit={hendleSubmit} className={s.form}>\n      <label htmlFor={nameInputId} className={s.label}>\n        Name:\n        <input\n          type=\"text\"\n          name=\"name\"\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          required\n          placeholder=\"Input name\"\n          className={s.input}\n          value={name}\n          onChange={hendleInputChange}\n          id={nameInputId}\n        />\n      </label>\n      <label htmlFor={numberInputId} className={s.label}>\n        Number:\n        <input\n          type=\"tel\"\n          name=\"phone\"\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n          required\n          placeholder=\"Input number\"\n          className={s.input}\n          value={phone}\n          onChange={hendleInputChange}\n          id={numberInputId}\n        />\n      </label>\n      <button type=\"submit\" className={s.addContact}>\n        Add contact\n      </button>\n    </form>\n  );\n}\n\nexport default Form;\n\nForm.propTypes = {\n  onSubmit: PropTypes.func,\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"filter\":\"Filter_filter__vxThR\",\"label\":\"Filter_label__vEd1E\",\"input\":\"Filter_input__N7T3z\",\"title\":\"Filter_title__pSkfx\"};","import s from './Filter.module.css';\nimport PropTypes from 'prop-types';\n\nconst Filter = ({ value, onChange }) => {\n  return (\n    <div className={s.filter}>\n      <h1 className={s.title}>CONTACTS:</h1>\n      <label className={s.label}>\n        FILTER BY NAME:\n        <input\n          type=\"text\"\n          name=\"name\"\n          value={value}\n          onChange={onChange}\n          className={s.input}\n        />\n      </label>\n    </div>\n  );\n};\n\nexport default Filter;\nFilter.propTypes = {\n  value: PropTypes.string.isRequired,\n  onChange: PropTypes.func.isRequired,\n};\n","export const getContactsList = store => store.contacts;\n","export const getFilter = store => store.filter;\n","import { useEffect } from 'react';\nimport PhoneBookList from '../../components/PhoneBookList/PhoneBookList';\nimport Form from '../../components/Form/Form';\nimport Filter from '../../components/Filter/Filter';\n\nimport { useSelector, useDispatch } from 'react-redux';\nimport {\n  fetchContacts,\n  deleteContacts,\n  addItems,\n} from 'redux/items/phone-book-items-operations';\nimport { addFilter } from 'redux/filter/phoneBookFilter-actions';\nimport { getContactsList } from 'redux/items/phone-book-items-selector';\nimport { getFilter } from 'redux/filter/phoneBookFilter-selector';\n\nconst ContactsPage = () => {\n  const { loading } = useSelector(getContactsList);\n  const filter = useSelector(getFilter);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  const phoneList = useSelector(store => {\n    const filteredContact = store.contacts.items.filter(item =>\n      item.name.toLowerCase().includes(store.filter.toLocaleLowerCase())\n    );\n    return filteredContact;\n  });\n\n  const onAddContact = data => {\n    const action = addItems(data);\n    dispatch(action);\n  };\n\n  const onDelContact = id => {\n    const action = deleteContacts(id);\n    dispatch(action);\n    // dispatch(fetchContacts());\n  };\n\n  const onChangeFilter = event => {\n    const action = addFilter(event.currentTarget.value);\n    dispatch(action);\n  };\n  return (\n    <div>\n      <Form onSubmit={onAddContact} />\n      <Filter value={filter} onChange={onChangeFilter} />\n      {loading && <p>...Loading</p>}\n      <PhoneBookList\n        phoneList={phoneList}\n        onDeletePhoneListItem={onDelContact}\n      />\n    </div>\n  );\n};\n\nexport default ContactsPage;\n","export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n"],"names":["phoneList","onDeletePhoneListItem","className","s","map","id","name","number","onClick","onSubmit","useState","setName","phone","setPhone","nameInputId","nanoid","numberInputId","hendleInputChange","event","currentTarget","value","resetForm","preventDefault","htmlFor","type","pattern","title","required","placeholder","onChange","getContactsList","store","contacts","getFilter","filter","loading","useSelector","dispatch","useDispatch","useEffect","fetchContacts","items","item","toLowerCase","includes","toLocaleLowerCase","data","action","addItems","addFilter","deleteContacts","size","crypto","getRandomValues","Uint8Array","reduce","byte","toString","toUpperCase"],"sourceRoot":""}